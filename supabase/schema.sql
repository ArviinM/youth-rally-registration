-- Drop dependent objects first if they exist (like RLS policies referencing the table)
-- You might need to drop policies manually in the Supabase UI if they cause issues here.
-- Consider dropping/recreating policies after the table structure is finalized.

-- Drop the type if it exists (needed for re-running the script during development)
DROP TYPE IF EXISTS public.church_location_enum CASCADE;

-- Drop the table if it already exists to apply changes
DROP TABLE IF EXISTS public.registrants CASCADE;

-- Create the ENUM type for church locations
CREATE TYPE public.church_location_enum AS ENUM (
    'Alaminos',
    'Bae',
    'Bagong Kalsada',
    'BiÃ±an',
    'Cabuyao',
    'Calamba',
    'Calauan',
    'Canlubang',
    'Carmona',
    'GMA',
    'Macabling',
    'Makiling',
    'Pagsanjan',
    'Pila',
    'Romblon',
    'San Pablo',
    'Silang',
    'Sta. Cruz',
    'Sta. Rosa',
    'Victoria'
);

-- Create the table for registrants with ENUM and gender
CREATE TABLE public.registrants (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    full_name text NOT NULL,
    age integer NOT NULL,
    gender text, -- Optional gender field
    church_location public.church_location_enum, -- Use the ENUM type
    assigned_group integer -- Represents group number 1 through 5
    -- Add other optional fields from project doc if needed: contact_number, email
    -- contact_number text,
    -- email text
);

-- Add comments to columns for clarity
COMMENT ON COLUMN public.registrants.full_name IS 'Full name of the registrant';
COMMENT ON COLUMN public.registrants.age IS 'Age of the registrant (validation >= 12 happens in application)';
COMMENT ON COLUMN public.registrants.gender IS 'Optional gender of the registrant';
COMMENT ON COLUMN public.registrants.church_location IS 'Church location of the registrant (Enum)';
COMMENT ON COLUMN public.registrants.assigned_group IS 'Group number (1-5) assigned by the algorithm';

-- Enable Row Level Security (RLS) for the table
-- IMPORTANT: You MUST define RLS policies after this to control access
ALTER TABLE public.registrants ENABLE ROW LEVEL SECURITY;

-- Optional: Create indexes
-- CREATE INDEX idx_registrants_assigned_group ON public.registrants(assigned_group);
-- CREATE INDEX idx_registrants_church_location ON public.registrants(church_location);

-- _______________ RLS POLICIES _______________
-- Policies should be managed in the Supabase Dashboard or using Supabase migrations.
-- The policies below are examples and might need adjustment based on your authentication setup.

-- Example Policy 1: Allow anonymous insert
-- This allows anyone to submit the registration form.
DROP POLICY IF EXISTS "Allow anonymous insert" ON public.registrants;
CREATE POLICY "Allow anonymous insert" ON public.registrants
FOR INSERT WITH CHECK (true);

-- Example Policy 2: Allow admin full access
-- This assumes you have a way to identify admins, e.g., a custom claim or an auth.users helper table.
-- Replace `is_admin(auth.uid())` with your actual admin check logic.
/*
DROP POLICY IF EXISTS "Allow admin full access" ON public.registrants;
CREATE POLICY "Allow admin full access" ON public.registrants
FOR ALL
USING (is_admin(auth.uid())) -- Function to check if the user is an admin
WITH CHECK (is_admin(auth.uid()));
*/

-- Example Policy 3: Allow authenticated users to read their own data (if applicable)
/*
DROP POLICY IF EXISTS "Allow individual read access" ON public.registrants;
CREATE POLICY "Allow individual read access" ON public.registrants
FOR SELECT
USING (auth.uid() = user_id); -- Assuming you add a user_id column linked to auth.users.id
*/

-- NOTE: Without specific admin read/update/delete policies, admins won't be able to manage data
--       unless they bypass RLS (which is not recommended for application logic).
--       Define policies for SELECT, UPDATE, DELETE restricted to your admin role/users. 